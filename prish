#!/usr/bin/env bash
#==========================HEADER====================================|
#AUTOR
# Jefferson 'slackjeff' Rocha <root@slackjeff.com.br>
#
#LICENÇA
# MIT
#
#PROGRAMA
# prish - Dê voz a quem precisa.
#
#DOCUMENTAÇÃO
# Leia a documentação completa que se encontra externamente
#
#CHANGELOG
#
#====================================================================|

#================= BIBLIOTECAS
. prish.conf # Carregando arquivo de configuração do sistema

#================= VARIÁVEIS
name='prish'             # Nome do Projeto
version='0.1ab'        # Versão
sound='sons'           # Diretório das vozes.
doc='documentacao'     # Diretório da documentação.
menu='menu'            # Diretório do menu
 
#================= TEST
# Conferindo se todos os diretórios existem!
directories=(
    "$sound"
    "$doc"
    "$menu"
)

for check_dir in "${directories[@]}"; do
    [ ! -d "$check_dir" ] && { echo "Diretório '$check_dir' não foi encontrado!"; exit 1;}
done

# Verificando se as deps estão supridas
# Adicione no vetor conforme ira aumentando
# as dependencias da pri.
dep=(
   'play'
)

# Loop para varrer a array atrás das deps.
for check in "${dep[@]}"; do
    if ! type "$check" &>/dev/null; then
        echo "Falta instalar a dependência ${check}."
        exit 1
    fi
done

#================= FUNCÕES
_HELP()
{
   echo
}

_BAR() # Barra de informações
{      # Esta barra ainda não tem um objetivo ao certo;
       # Se alguém achar algum dado interessante para por nesta barra
       # fique a vontade.
   echo "Nome do Paciente: $name | Idade: $age"
   # Linha responsiva
   printf '%*s\n\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

_SLEEP() # Função para adormecer em determinados momentos.
{
   sleep "$@"
}

_MAIN() # Função que faz a rotina principal
{
   # Declarações de variaveis locais
   local menu='menu/menu.txt'

   while :; do
      # Verificando se chaves estão ligadas.
      clear # Limpa a tela ae
      [ "$bar" = '0' ] && _BAR
      i='0' # var de incremento.
      # Printando na tela
      while IFS= read -r print_me; do
          i=$((i+1))
          # Se ter um # é sinal que não é para ser imprimido no menu.
          echo "$print_me" | grep -q "^#" && { i=$((i-1)); continue;}
          echo "[ ${i} ] $print_me" # Imprimindo com incremento.
          show_me[$i]="$print_me" # pegando no vetor todas opções
      done < "$menu"

      # STDIN limitada a 1 caractere.
      # Ou seja opção 10 11 20 50 não funciona e sim de 1-9.
      # Isto para quando a pessoa apertar o número já ir automaticamente
      # sem necessitar do enter.
      read -n 1 -p $'\n' operation

      # Checando se a entrada é numeral.
      if ! [ "$operation" -eq "$operation" ] 2>/dev/null; then
          echo "Somente números."
          _SLEEP "$timer"
          continue
      fi
      
      # Removendo acentuações e outras besteirinhas.
      show_me[$operation]=$(echo "${show_me[$operation]}" | sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚüÜçÇ/aAaAaAaAeEeEiIoOoOoOuUuUcC/')

      # Convertendo toda entrada em minusculo
      show_me[$operation]=${show_me[$operation],,}

      # Trocando espaços por -
      show_me[$operation]=${show_me[$operation]// /-}

      ( # Abertura de subshell
         cd $sound # Entrando no diretório sound
         # Verificando se arquivo existe
         if [ ! -e "${show_me[$operation]}.ogg" ]; then
             echo -e "\n${show_me[$operation]}, NÃO EXISTE no diretório '$sound'"
             _SLEEP "$timer"
             return 1
         fi
         play -q ${show_me[$operation]}.ogg # Tudo ocorreu bem? Então toca.
      )
   done # Loop principal
}

#================= INICIO
case $1 in
    -s|--start) _MAIN ;;
    -h|--help)  _HELP ;;
esac
